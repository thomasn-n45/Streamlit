# -*- coding: utf-8 -*-
"""my_streamlit_app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FawTO2XnCR9OTppbjyLO4BXboPpNtvgu
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

link = "https://raw.githubusercontent.com/murpi/wilddata/master/quests/cars.csv"
df_voiture = pd.read_csv(link)
df_final = pd.DataFrame()

st.sidebar.title("Menu")
st.title('Bienvenue')
selected_options = st.sidebar.multiselect("Choisissez les continents", ["US", "Europe", "Japon"])

if "US" in selected_options:
    df_final = pd.concat([df_final, df_voiture[df_voiture['continent'] == ' US.'] ])
    st.write("Bienvenue aux États-Unis")

elif "Europe" in selected_options:
    df_final = pd.concat([df_final, df_voiture[df_voiture['continent'] == ' Europe.'] ])
    st.write("Bienvenue en Europe")

elif "Japon" in selected_options:
    df_final = pd.concat([df_final, df_voiture[df_voiture['continent'] == ' Japon.'] ])
    st.write("Bienvenue au Japon")

def summarize(df) :

# 1) Calcul statistiques de base grâce à .describe()
    df_final = df.describe(include='all').T

# 2) Affichage des valeurs nulles sur une colonne.
    df_final['NAN'] = df.apply(lambda x: 'OUI' if pd.isna(x).any() else 'NON')

# 3) Calcul % de valeurs nulles : application d'un lambda pour calculer le pourcentage.
    df_final['% NAN'] = df.apply(lambda x : (x.isna().sum() / len(x))*100)

# 4) Affichage des valeurs en doublons sur une colonne.
    df_final['Duplicated'] = df.apply(lambda x: 'OUI' if x.duplicated().any() else 'NON')

# 5) Calcul % de valeurs en doublons : application d'un lambda pour calculer le pourcentage.
    df_final['% Duplicated'] = df.apply(lambda x : (x.duplicated().sum() / len(x))*100)

# 6) Calcul nombre de valeurs uniques : application d'un lambda pour calculer le nombre de valeurs uniques.
    df_final['Uniques'] = df.apply(lambda x : len(x.unique()))

# 7) Création de la heatmap.
    viz_correlation = sns.heatmap(df.select_dtypes(include ='number').corr(), cmap="coolwarm", center=0)


    st.pyplot(viz_correlation.figure)

# 8) Affichage du pairplot par morceaux de 10x10 maximum. On commence par couper le dataframe en morceaux de 10. On fait ensuite une boucle pour afficher les différents pairplots.
    colonnes_morceaux = [df.columns[i:i+10] for i in range(0, len(df.columns), 10)]

    for morceau in colonnes_morceaux:
        df_morceaux = df[morceau]
        viz_correlation1 = sns.pairplot(df_morceaux)
        st.pyplot(viz_correlation1.figure)

# 9) Affichage des boxplots de toutes les valeurs numériques.
    # On commence par récupérer les colonnes avec des valeurs numériques (int, float)
    col_num = df.select_dtypes(include=['int', 'float'])

    # On crée une boucle qui crée un graphique global contenant un sous-graphique de type boxplot pour chaque colonne numérique.
    plt.figure(figsize=(8, 30))

    for i, colonne in enumerate(col_num, 1):
        plt.subplot(len(df.columns), 1, i)
        viz_correlation2 = sns.boxplot(x=df[colonne])
        plt.title(colonne)

    plt.tight_layout()
    st.pyplot(viz_correlation2.figure)

# 10) Affichage des cellules en rouge.
    df_final = df_final.style.apply(lambda column : ['background : red' if value > 0 else '' for value in column], subset=['% NAN', '% Duplicated'])
    df_final
    return df_final

summarize(df_voiture)